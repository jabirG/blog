{
  "hash": "ee8b2618b66073fea40b527e4a79f195",
  "result": {
    "markdown": "---\ntitle: \"Final Data Project\"\nauthor: \"DataTrail Team\"\noutput:\n  html_document:\n    df_print: paged\n---\n\n\n# Final Data Project\n\n### Your objectives!\n\nTo complete this project there are a few requirements you will need to fulfill. Remember that you are not on your own for this project! Data science is done best as a community, so please ask others (and instructors) questions you have when you get stuck!\n\n1.  Clearly state the data science question and goal for the analysis you are embarking on.\n\n2.  This project should be completely uploaded and up to date on GitHub. Follow the steps in `Pushing and Pulling Changes` chapter for how to git add, commit, and push the changes you have done.\n\n3.  Follow good organization principles -- you should at least have 2 folders: a `results` folder and a `data` folder. 4. 4. You should also have a README\n\n4.  Make a resulting plot that you save to a file.\n\n5.  Write up your final observations in regards to your original question. Note that some data science projects end with \"This isn't what I thought it would be\" or \"that's strange\" or \"I think this is leading into another question I would need to investigate\". Whatever your observations may be, write them up in your main R Markdown.\n\n6.  When you feel your analysis is ready for review, send your instructor the GitHub link to your project so they can review it.\n\n7.  Pat yourself on the back for all this work! You are a data scientist!\n\n## Data\n\nFor this project you will use whatever data you choose.\n\nOptions for places to find data are:\n\n-   https://www.kaggle.com/datasets\n-   https://shiny.rstudio.com/gallery/tidy-tuesday.html\n-   https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/00Index.html (This is the data that comes with R - you can load them using `datasets::` and pressing tab in RStudio to see the names of the datasets - for example `datasets::ability.cov` will load the ability dataset.) You are not limited to these options for finding your data.\n\n\\<Write where you got your data and provide the link if applicable.\\>\n\n\\<Describe how the data was originally created. If this is data that is part of `datasets` you can use the `?` like so: `?datasets::AirPassengers` to see information about the datasets.Otherwise provide a summary based on the source of the data.\\>\n\n## The goal of this analysis\n\n\\<Write here what the goal of this analysis is. What question are we trying to answer?\\> \\## Set up\n\nwhat new gaming companies are competing against the big gaming companies?\n\nLoad packages you will need for this analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## you can add more, or change...these are suggestions\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(readr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(tidyr)\nlibrary(usethis)\n```\n:::\n\n\n## Set up directories\n\nSet up the directories you will need.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (!dir.exists(\"data\")) {\n  dir.create(\"data\")\n}\nif (!dir.exists(\"results\")) {\n  dir.create(\"results\")\n}\n```\n:::\n\n\n## Get the data\n\nsource of data :https://github.com/rfordatascience/tidytuesday/blob/master/data/2021/2021-03-16/readme.md#gamescsv\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read in your dataset(s)\n\n##source of data :https://github.com/rfordatascience/tidytuesday/blob/master/data/2021/2021-03-16/readme.md#gamescsv\n\ngames <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-03-16/games.csv')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 83631 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): gamename, month, avg_peak_perc\ndbl (4): year, avg, gain, peak\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\nExplore your data here and describe what variables and samples you have.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(games)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 83,631\nColumns: 7\n$ gamename      <chr> \"Counter-Strike: Global Offensive\", \"Dota 2\", \"PLAYERUNK…\n$ year          <dbl> 2021, 2021, 2021, 2021, 2021, 2021, 2021, 2021, 2021, 20…\n$ month         <chr> \"February\", \"February\", \"February\", \"February\", \"Februar…\n$ avg           <dbl> 741013.24, 404832.13, 198957.52, 120982.64, 117742.27, 1…\n$ gain          <dbl> -2196.42, -27839.52, -2289.67, 49215.90, -24374.98, 1808…\n$ peak          <dbl> 1123485, 651615, 447390, 196799, 224276, 133620, 146438,…\n$ avg_peak_perc <chr> \"65.9567%\", \"62.1275%\", \"44.4707%\", \"61.4752%\", \"52.4988…\n```\n:::\n:::\n\n\n## Cleaning the data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngames_tidy <- games |> \n  select(gamename,avg,month,year) |>\n  top_n(15,year) |>\n  arrange(desc(avg)) |>\n  filter(gamename %in% c(\"Counter-Strike: Global Offensive\",\"Dota 2\",\"PLAYERUNKNOWN'S BATTLEGROUNDS\",\"Rust\",\"Apex Legends\",\"Grand Theft Auto V\",\"Team Fortress 2\",\"Cyberpunk 2077\",\"Tom Clancy's Rainbow Six Siege\",\"ARK: Survival Evolved\"))\n\n\ngames %>% \n  filter(year == 2021) %>%\n  select(gamename,avg,month,year) %>%\n  top_n(15,avg) |>\n  arrange(desc(avg)) %>%\n  filter(gamename %in% c(\"Counter-Strike: Global Offensive\",\"Dota 2\",\"PLAYERUNKNOWN'S BATTLEGROUNDS\",\"Rust\",\"Apex Legends\",\"Grand Theft Auto V\",\"Team Fortress 2\",\"Cyberpunk 2077\",\"Tom Clancy's Rainbow Six Siege\",\"ARK: Survival Evolved\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 15 × 4\n   gamename                             avg month     year\n   <chr>                              <dbl> <chr>    <dbl>\n 1 Counter-Strike: Global Offensive 743210. January   2021\n 2 Counter-Strike: Global Offensive 741013. February  2021\n 3 Dota 2                           432672. January   2021\n 4 Dota 2                           404832. February  2021\n 5 PLAYERUNKNOWN'S BATTLEGROUNDS    201247. January   2021\n 6 PLAYERUNKNOWN'S BATTLEGROUNDS    198958. February  2021\n 7 Rust                             142117. January   2021\n 8 Apex Legends                     120983. February  2021\n 9 Rust                             117742. February  2021\n10 Grand Theft Auto V               101251. January   2021\n11 Team Fortress 2                  101231. February  2021\n12 Grand Theft Auto V                90648. February  2021\n13 Team Fortress 2                   83148. January   2021\n14 Cyberpunk 2077                    82147. January   2021\n15 Tom Clancy's Rainbow Six Siege    77717. January   2021\n```\n:::\n:::\n\n\n## Plot the data!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n##avg means average people that still play that game\ngames_tidy_plot <- ggplot(data = games_tidy) + \n  geom_point(aes(x = gamename,y = avg,color = gamename)) +  theme(axis.text.x = element_text(angle = 60, hjust = 1))\ngames_tidy_plot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggsave(\"results.png\",plot = games_tidy_plot)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSaving 7 x 5 in image\n```\n:::\n:::\n\n\nfrom this plot i can see that counter strike is the top game being played\n\nhow long has counter strike been the leading game for?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncsgo_data <- games %>% select(gamename,year,avg)\n\ncsgo_df <- csgo_data %>% group_by(year) %>% summarise(mean_pop = mean(avg))\n\nggplot(data =csgo_data,aes(year,avg)) + geom_line()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\ni want to compare counter strike from 2012 to 2021 to all games\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncomp_df <- games %>% group_by(year) %>% filter(all(2012:2021)) %>% summarise(mean_pop = mean(avg))\n\ncscom_plot <- bind_rows(list(csgo = csgo_df,all_other_games = comp_df),.id = \"game\")\n\ncsgo_plot <- ggplot(cscom_plot,aes(year,mean_pop,color = game)) + geom_point() + geom_smooth()\n\nggsave(\"csgo_plot.png\",plot = csgo_plot)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSaving 7 x 5 in image\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n:::\n\n```{.r .cell-code}\nggplot(cscom_plot,aes(year,mean_pop,color = game)) + geom_point() + geom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nthis plot didn't really tell me the impact so\n\nnow i want to compare csgo to games like grand theft auto and dota 2, which were very popular games over the years\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngame_comparison <- games %>% filter(gamename %in% c(\"Counter-Strike: Global Offensive\",\"Dota 2\",\"Grand Theft Auto V\")) %>% select(gamename,year,avg)\n\ngames_plot <- ggplot(game_comparison,aes(year,avg,color = gamename)) + geom_smooth()\n\nggplot(game_comparison,aes(year,avg,color = gamename)) + geom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(\"games_plot.png\",plot = games_plot)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSaving 7 x 5 in image\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n:::\n:::\n\n## Get the stats\n\n### Conclusion\n\nWrite up your thoughts about this data science project here and answer the following questions:\n\ni can tell from this plot that games like apex legends,ark survival evolved,team fortress 2,cyberpunk 2077 are runners ups comparing them to the main companies like counter strike,grand theft auto,rainbow six siege and rust in the earlier part of 2021 from steams data.\n\nalso i found that counter strike averaged way more players over the years than other games\n\nthe company names of the big companies are\n\n-counter strike = Valve\n\n-dota 2 = also Valve\n\n-grand theft auto = Rockstar\n\n-rust = facepunch\n\n-rainbow six siege = ubisoft\n\nRunner up companies\n\n-apex legends = Respawn Entertainment\n\n-team forttress 2 = Valve\n\n-ark survival evolved = Studio Wildcard\n\n-cyberpunk 2077 = CD Projekt Red\n\n-   What did you find out in regards to your original question?\n\nthat the big companies could own alot more than i thought,the runner ups have been making waves in the gaming community\n\ncsgo has only been the leading game in players sense 2019\n\n-   What exceptions or caveats do you have in regards to your analysis you did?\n\nthat this data is only part of a small portion of 2021, and this is data only from a website called steam\n\nthat this data is not current data\n\n-   What follow up questions do you have?\n\ni wonder what games are peaking right now on the charts, i also wonder if some of these games are still pulling that many people\n\n## Print out session info\n\nSession info is a good thing to print out at the end of your notebooks so that you (and other folks) referencing your notebooks know what software versions and libraries you used to run the notebook.\n\n\\`\\`\\`{r} sessionInfo()\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}