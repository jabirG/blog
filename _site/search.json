[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Jabir’s Blog",
    "section": "",
    "text": "U.S Tornadoes\n\n\n\n\n\n\n\n\n\n\n\n\njabir\n\n\n\n\n\n\n  \n\n\n\n\nHorror Movies\n\n\n\n\n\n\n\n\n\n\n\n\nJabir\n\n\n\n\n\n\n  \n\n\n\n\nVideo Games\n\n\n\n\n\n\n\n\n\n\n\n\nJabir\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/tornado_mapping_exploration/index.html",
    "href": "posts/tornado_mapping_exploration/index.html",
    "title": "U.S Tornadoes",
    "section": "",
    "text": "This data-set is about the tornadoes that effected the U.S from 1950-2022 showing their magnitudes and other useful information\n\n\n\n\n\nvariable\nclass\ndescription\n\n\n\n\nom\ninteger\nTornado number. Effectively an ID for this tornado in this year.\n\n\nyr\ninteger\nYear, 1950-2022.\n\n\nmo\ninteger\nMonth, 1-12.\n\n\ndy\ninteger\nDay of the month, 1-31.\n\n\ndate\ndate\nDate.\n\n\ntime\ntime\nTime.\n\n\ntz\ncharacter\nCanonical tz database timezone.\n\n\ndatetime_utc\ndatetime\nDate and time normalized to UTC.\n\n\nst\ncharacter\nTwo-letter postal abbreviation for the state (DC = Washington, DC; PR = Puerto Rico; VI = Virgin Islands).\n\n\nstf\ninteger\nState FIPS (Federal Information Processing Standards) number.\n\n\nmag\ninteger\nMagnitude on the F scale (EF beginning in 2007). Some of these values are estimated (see fc).\n\n\ninj\ninteger\nNumber of injuries. When summing for state totals, use sn == 1 (see below).\n\n\nfat\ninteger\nNumber of fatalities. When summing for state totals, use sn == 1 (see below).\n\n\nloss\ndouble\nEstimated property loss information in dollars. Prior to 1996, values were grouped into ranges. The reported number for such years is the maximum of its range.\n\n\nslat\ndouble\nStarting latitude in decimal degrees.\n\n\nslon\ndouble\nStarting longitude in decimal degrees.\n\n\nelat\ndouble\nEnding latitude in decimal degrees.\n\n\nelon\ndouble\nEnding longitude in decimal degrees.\n\n\nlen\ndouble\nLength in miles.\n\n\nwid\ndouble\nWidth in yards.\n\n\nns\ninteger\nNumber of states affected by this tornado. 1, 2, or 3.\n\n\nsn\ninteger\nState number for this row. 1 means the row contains the entire track information for this state, 0 means there is at least one more entry for this state for this tornado (om + yr).\n\n\nf1\ninteger\nFIPS code for the 1st county.\n\n\nf2\ninteger\nFIPS code for the 2nd county.\n\n\nf3\ninteger\nFIPS code for the 3rd county.\n\n\nf4\ninteger\nFIPS code for the 4th county.\n\n\nfc\nlogical\nWas the mag column estimated?"
  },
  {
    "objectID": "posts/tornado_mapping_exploration/index.html#data",
    "href": "posts/tornado_mapping_exploration/index.html#data",
    "title": "U.S Tornadoes",
    "section": "",
    "text": "This data-set is about the tornadoes that effected the U.S from 1950-2022 showing their magnitudes and other useful information\n\n\n\n\n\nvariable\nclass\ndescription\n\n\n\n\nom\ninteger\nTornado number. Effectively an ID for this tornado in this year.\n\n\nyr\ninteger\nYear, 1950-2022.\n\n\nmo\ninteger\nMonth, 1-12.\n\n\ndy\ninteger\nDay of the month, 1-31.\n\n\ndate\ndate\nDate.\n\n\ntime\ntime\nTime.\n\n\ntz\ncharacter\nCanonical tz database timezone.\n\n\ndatetime_utc\ndatetime\nDate and time normalized to UTC.\n\n\nst\ncharacter\nTwo-letter postal abbreviation for the state (DC = Washington, DC; PR = Puerto Rico; VI = Virgin Islands).\n\n\nstf\ninteger\nState FIPS (Federal Information Processing Standards) number.\n\n\nmag\ninteger\nMagnitude on the F scale (EF beginning in 2007). Some of these values are estimated (see fc).\n\n\ninj\ninteger\nNumber of injuries. When summing for state totals, use sn == 1 (see below).\n\n\nfat\ninteger\nNumber of fatalities. When summing for state totals, use sn == 1 (see below).\n\n\nloss\ndouble\nEstimated property loss information in dollars. Prior to 1996, values were grouped into ranges. The reported number for such years is the maximum of its range.\n\n\nslat\ndouble\nStarting latitude in decimal degrees.\n\n\nslon\ndouble\nStarting longitude in decimal degrees.\n\n\nelat\ndouble\nEnding latitude in decimal degrees.\n\n\nelon\ndouble\nEnding longitude in decimal degrees.\n\n\nlen\ndouble\nLength in miles.\n\n\nwid\ndouble\nWidth in yards.\n\n\nns\ninteger\nNumber of states affected by this tornado. 1, 2, or 3.\n\n\nsn\ninteger\nState number for this row. 1 means the row contains the entire track information for this state, 0 means there is at least one more entry for this state for this tornado (om + yr).\n\n\nf1\ninteger\nFIPS code for the 1st county.\n\n\nf2\ninteger\nFIPS code for the 2nd county.\n\n\nf3\ninteger\nFIPS code for the 3rd county.\n\n\nf4\ninteger\nFIPS code for the 4th county.\n\n\nfc\nlogical\nWas the mag column estimated?"
  },
  {
    "objectID": "posts/tornado_mapping_exploration/index.html#packages",
    "href": "posts/tornado_mapping_exploration/index.html#packages",
    "title": "U.S Tornadoes",
    "section": "Packages",
    "text": "Packages\npackages(“ggplot2”)\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(maps)\n\n\nAttaching package: 'maps'\n\nThe following object is masked from 'package:purrr':\n\n    map\n\nlibrary(mapproj)\nlibrary(usmap)\nlibrary(readr)\nlibrary(sf)\n\nLinking to GEOS 3.8.0, GDAL 3.0.4, PROJ 6.3.1; sf_use_s2() is TRUE\n\nlibrary(RColorBrewer)\nlibrary(esquisse)"
  },
  {
    "objectID": "posts/tornado_mapping_exploration/index.html#explorations",
    "href": "posts/tornado_mapping_exploration/index.html#explorations",
    "title": "U.S Tornadoes",
    "section": "Explorations",
    "text": "Explorations\n\nWhat are the states most at risk?\nTexas is most at risk for tornadoes and some secondary states like florida.\n\n#reading in the data\ntornado &lt;- read_csv(\"tornado.csv\")\n\nRows: 68693 Columns: 27\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (2): tz, st\ndbl  (21): om, yr, mo, dy, stf, mag, inj, fat, loss, slat, slon, elat, elon,...\nlgl   (1): fc\ndttm  (1): datetime_utc\ndate  (1): date\ntime  (1): time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nus_states &lt;- map_data(\"state\")\n\ntornfixed &lt;- tornado |&gt;\n  select(st,ns) |&gt;\n  mutate(region = recode(st,\n  \"AL\" = \"alabama\",\n  \"AK\" = \"alaska\",\n  \"AZ\" = \"arizona\",\n  \"AR\" = \"arkansas\",\n  \"CA\" = \"california\",\n  \"CO\" = \"colorado\",\n  \"CT\" = \"connecticut\",\n  \"DE\" = \"delaware\",\n  \"FL\" = \"florida\",\n  \"GA\" = \"georgia\",\n  \"HI\" = \"hawaii\",\n  \"ID\" = \"idaho\",\n  \"IL\" = \"illinois\",\n  \"IN\" = \"indiana\",\n  \"IA\" = \"iowa\",\n  \"KS\" = \"kansas\",\n  \"KY\" = \"kentucky\",\n  \"LA\" = \"louisiana\",\n  \"ME\" = \"maine\",\n  \"MD\" = \"maryland\",\n  \"MA\" = \"massachusetts\",\n  \"MI\" = \"michigan\",\n  \"MN\" = \"minnesota\",\n  \"MS\" = \"mississippi\",\n  \"MO\" = \"missouri\",\n  \"MT\" = \"montana\",\n  \"NE\" = \"nebraska\",\n  \"NV\" = \"nevada\",\n  \"NH\" = \"new hampshire\",\n  \"NJ\" = \"new jersey\",\n  \"NM\" = \"new mexico\",\n  \"NY\" = \"new york\",\n  \"NC\" = \"north carolina\",\n  \"ND\" = \"north dakota\",\n  \"OH\" = \"ohio\",\n  \"OK\" = \"oklahoma\",\n  \"OR\" = \"oregon\",\n  \"PA\" = \"pennsylvania\",\n  \"RI\" = \"rhode island\",\n  \"SC\" = \"south carolina\",\n  \"SD\" = \"south dakota\",\n  \"TN\" = \"tennessee\",\n  \"TX\" = \"texas\",\n  \"UT\" = \"utah\",\n  \"VT\" = \"vermont\",\n  \"VA\" = \"virginia\",\n  \"WA\" = \"washington\",\n  \"WV\" = \"west virginia\",\n  \"WI\" = \"wisconsin\",\n  \"WY\" = \"wyoming\",\n  \"DC\" = \"district of columbia\"\n)) |&gt;\n  select(region,ns)\n\ntorn_totals &lt;- tornfixed |&gt;\n  group_by(region) |&gt;\n  summarize(n_tornadoes = sum(ns))\n\n\nmap &lt;- left_join(us_states,torn_totals)\n\nJoining with `by = join_by(region)`\n\n\n\nmap |&gt;\n  ggplot(aes(long, lat, group = subregion)) +\n  geom_map(\n    aes(map_id = region),\n    map = us_states\n  ) +\n  geom_polygon(aes(group = group, fill = n_tornadoes), color = \"black\") +\n  scale_fill_gradient2(low = \"blue\", mid = \"white\", high = \"red\") +\n  coord_quickmap()\n\n\n\n\n\n\nWhat state usually have the most tornadoes?\nIt looks like Texas has had the most tornadoes over the years\n\nmost_tornadoes &lt;- tornado |&gt;\n  select(st,ns) |&gt;\n  group_by(st) |&gt;\n  summarise(n = n()) |&gt;\n  arrange(desc(n)) |&gt;\n  top_n(10)\n\nSelecting by n\n\nmost_tornadoes |&gt;\n  ggplot(aes(x = reorder(st, -n), y = n)) +\n  geom_bar(stat = \"identity\", fill = \"#d16002\") +\n  labs(\n    title = \"States with the most tornadoes over the years\",\n    x = \"states in abbreviations\",\n    y = \"number of tornadoes\"\n  ) +\n  theme_dark()\n\n\n\n\n\nBut i want to see which state has had the most tornadoes in the past 5 years?\nTexas is in the top 10 in 3 of the past 5 years Texas has the most in 2019,2022 and 2020.\n\npast5 &lt;- tornado |&gt;\n  select(st,ns,yr) |&gt;\n  filter(yr %in% c(\"2018\",\"2019\",\"2020\",\"2021\",\"2022\"), st %in% c(\"TX\",\"OK\",\"IA\",\"MS\",\"AL\")) |&gt; \n  group_by(st,yr) |&gt;\n  summarise(n = n()) |&gt;\n  arrange(desc(n))\n\n`summarise()` has grouped output by 'st'. You can override using the `.groups`\nargument.\n\npast5 |&gt;\n  ggplot(aes(x = n, y = yr, color = st)) +\n  geom_line() +\n  labs(\n    title = \"Most Tornadoes In The Past 5 Years\",\n    subtitle = \"Showing the Unpredictability of Tornadoes\",\n    x = \"Number of Tornadoes\",\n    y = \"year\"\n  ) +\n  theme_classic()\n\n\n\n\n\npast5 |&gt;\n  ggplot(aes(x = st, y = n, color = yr)) +\n  geom_point()\n\n\n\n\n\npast5 |&gt;\n  ggplot(aes(x = st,y = n, fill = yr)) +\n  geom_bar(stat = \"identity\") +\n  labs(\n    title = \"Tornadoes over The Past 5 Years\",\n    subtitle = \"showing the impact more clearly\",\n    x = \"states\",\n    y = \"Number of Tornadoes\"\n  )\n\n\n\n\n\n\n\nWhat was the most dangerous tornado in the U.S between 1950-2022?\nThe tornado that was the most dangerous from 1950 to 2022 was the tornado in 2011 that happened in Missouri there were 158 fatalities the tornado was called Joplin.\n\ntornado |&gt;\n  select(st,mag,yr,fat) |&gt;\n  filter(mag %in% \"5\",) |&gt;\n  group_by(fat) |&gt;\n  arrange(desc(fat))\n\n# A tibble: 59 × 4\n# Groups:   fat [37]\n   st      mag    yr   fat\n   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 MO        5  2011   158\n 2 MI        5  1953   116\n 3 TX        5  1953   114\n 4 OK        5  1955    80\n 5 AL        5  2011    72\n 6 MS        5  1966    58\n 7 LA        5  1971    47\n 8 KS        5  1957    44\n 9 MS        5  1953    38\n10 OH        5  1974    36\n# ℹ 49 more rows"
  },
  {
    "objectID": "posts/horror-movie-exploration/index.html",
    "href": "posts/horror-movie-exploration/index.html",
    "title": "Tidy Tuesday Horror Movies",
    "section": "",
    "text": "I got this data from tidy tuesday on github\ntidytuesday/data/2022/2022-11-01 at master · rfordatascience/tidytuesday (github.com)"
  },
  {
    "objectID": "posts/horror-movie-exploration/index.html#data",
    "href": "posts/horror-movie-exploration/index.html#data",
    "title": "Tidy Tuesday Horror Movies",
    "section": "Data",
    "text": "Data\nThe dataset is about horror movies and their genres and popularities. I chose this dataset because i’ve been wanting to watch horror movies but i didn’t know which ones were interesting or considered good."
  },
  {
    "objectID": "posts/horror-movie-exploration/index.html#packages",
    "href": "posts/horror-movie-exploration/index.html#packages",
    "title": "Tidy Tuesday Horror Movies",
    "section": "Packages",
    "text": "Packages\nWhich packages will you be using and for what purpose?\nI will be using the tidyverse package for data wrangling and visualization, i will also be using the janitor package for initial cleaning.\n\nlibrary(tidyverse)\nlibrary(thematic)\n# add other packages, if any"
  },
  {
    "objectID": "posts/horror-movie-exploration/index.html#explorations",
    "href": "posts/horror-movie-exploration/index.html#explorations",
    "title": "Tidy Tuesday Horror Movies",
    "section": "Explorations",
    "text": "Explorations\nThe explorations were unexpected what i found there’s movies that when they first came out i thought they did bad in the box office but here those movies are being some of the best.\n\nhorrordf &lt;- read.csv(\"horror_movies.csv\")\n# add code to read data\n\n\nWhat movie made the most money?\nIt looks like “IT” is the horror movie that made the most money but since on the first line of codes list there’s movies there that aren’t really scary and more on the thriller side,i then did a second exploration and filtered the data by the horror genre and found that the scariest movie that made the most money in that genre is “The Exorcist”.\n\nhorrordf |&gt;\n  select(title,revenue) |&gt;\n   arrange(desc(revenue)) |&gt;\n  head() |&gt;\n  ggplot(aes(x = title, y = revenue)) +\n  geom_bar(stat = \"identity\")\n\n\n\n\n\nhorrordf |&gt;\n  select(title,revenue,genre_names) |&gt;\n  filter(genre_names %in% c(\"Horror\")) |&gt;\n  arrange(desc(revenue)) |&gt; \n  head() |&gt;\n  ggplot(aes(x = title,y = revenue)) +\n  geom_bar(stat = \"identity\", fill = \"#104E8B\") +\n  labs(title = \"Top 6 Horror Movies\", subtitle = \"In The Horror Genre\") +\n  theme_dark()\n\n\n\n\n\n\nWhich movies are the most popular?\nAfter seeing whats popular this shows that the movies that make the most money aren’t necessarily popular.However I don’t know what the popularity scale goes off of.So im going to compare the revenue and popularity in a scatterplot.After looking at the scatterplot the most popular movie didn’t really make money so i would initially take the movies that made money over popularity.\n\nhorrordf |&gt;\n  select(title,popularity,genre_names) |&gt;\n  arrange(desc(popularity)) \n\n\nhorrordf |&gt;\n  ggplot(aes(x = revenue, y = popularity)) +\n  geom_point()\n\n\n\n\n\n\nFor the movies that made a lot of revenue,did they have a large budget?\nI want to know if the budget has something to do with a movie being popular or making a large amount of revenue.\nHaving a large budget doesn’t necessarily mean anything some movies have low budgets but become box office hits for example “IT” having a 35 million dollar budget but then made over 700 million in the box office, while a movie like world war z had a 200 million dollar budget and then made 530 million dollars in revenue.\n\nhorrordf |&gt;\n  select(title, budget, revenue) |&gt;\n  arrange(desc(revenue)) |&gt;\n  top_n(20) |&gt;\n  ggplot(aes(x = title, y = revenue, color = budget)) +\n  geom_point() + \n   theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +\n  labs(title = \"\")\n\nSelecting by revenue"
  },
  {
    "objectID": "posts/horror-movie-exploration/index.html#discussion",
    "href": "posts/horror-movie-exploration/index.html#discussion",
    "title": "Tidy Tuesday Horror Movies",
    "section": "Discussion",
    "text": "Discussion\nSummary of findings on the data and what you learned in the process about the data context as well as about using R."
  },
  {
    "objectID": "posts/video-game-exploration/index.html",
    "href": "posts/video-game-exploration/index.html",
    "title": "Video Games",
    "section": "",
    "text": "To complete this project there are a few requirements you will need to fulfill. Remember that you are not on your own for this project! Data science is done best as a community, so please ask others (and instructors) questions you have when you get stuck!\n\nClearly state the data science question and goal for the analysis you are embarking on.\nThis project should be completely uploaded and up to date on GitHub. Follow the steps in Pushing and Pulling Changes chapter for how to git add, commit, and push the changes you have done.\nFollow good organization principles – you should at least have 2 folders: a results folder and a data folder. 4. 4. You should also have a README\nMake a resulting plot that you save to a file.\nWrite up your final observations in regards to your original question. Note that some data science projects end with “This isn’t what I thought it would be” or “that’s strange” or “I think this is leading into another question I would need to investigate”. Whatever your observations may be, write them up in your main R Markdown.\nWhen you feel your analysis is ready for review, send your instructor the GitHub link to your project so they can review it.\nPat yourself on the back for all this work! You are a data scientist!\n\n\n\n\nFor this project you will use whatever data you choose.\nOptions for places to find data are:\n\nhttps://www.kaggle.com/datasets\nhttps://shiny.rstudio.com/gallery/tidy-tuesday.html\nhttps://stat.ethz.ch/R-manual/R-devel/library/datasets/html/00Index.html (This is the data that comes with R - you can load them using datasets:: and pressing tab in RStudio to see the names of the datasets - for example datasets::ability.cov will load the ability dataset.) You are not limited to these options for finding your data.\n\n&lt;Write where you got your data and provide the link if applicable.&gt;\n&lt;Describe how the data was originally created. If this is data that is part of datasets you can use the ? like so: ?datasets::AirPassengers to see information about the datasets.Otherwise provide a summary based on the source of the data.&gt;\n\n\n\n&lt;Write here what the goal of this analysis is. What question are we trying to answer?&gt; ## Set up\nwhat new gaming companies are competing against the big gaming companies?\nLoad packages you will need for this analysis.\n\n## you can add more, or change...these are suggestions\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(readr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(tidyr)\nlibrary(usethis)\n\n\n\n\nSet up the directories you will need.\n\nif (!dir.exists(\"data\")) {\n  dir.create(\"data\")\n}\nif (!dir.exists(\"results\")) {\n  dir.create(\"results\")\n}\n\n\n\n\nsource of data :https://github.com/rfordatascience/tidytuesday/blob/master/data/2021/2021-03-16/readme.md#gamescsv\n\n# Read in your dataset(s)\n\n##source of data :https://github.com/rfordatascience/tidytuesday/blob/master/data/2021/2021-03-16/readme.md#gamescsv\n\ngames &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-03-16/games.csv')\n\nRows: 83631 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): gamename, month, avg_peak_perc\ndbl (4): year, avg, gain, peak\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nExplore your data here and describe what variables and samples you have.\n\nglimpse(games)\n\nRows: 83,631\nColumns: 7\n$ gamename      &lt;chr&gt; \"Counter-Strike: Global Offensive\", \"Dota 2\", \"PLAYERUNK…\n$ year          &lt;dbl&gt; 2021, 2021, 2021, 2021, 2021, 2021, 2021, 2021, 2021, 20…\n$ month         &lt;chr&gt; \"February\", \"February\", \"February\", \"February\", \"Februar…\n$ avg           &lt;dbl&gt; 741013.24, 404832.13, 198957.52, 120982.64, 117742.27, 1…\n$ gain          &lt;dbl&gt; -2196.42, -27839.52, -2289.67, 49215.90, -24374.98, 1808…\n$ peak          &lt;dbl&gt; 1123485, 651615, 447390, 196799, 224276, 133620, 146438,…\n$ avg_peak_perc &lt;chr&gt; \"65.9567%\", \"62.1275%\", \"44.4707%\", \"61.4752%\", \"52.4988…\n\n\n\n\n\n\ngames_tidy &lt;- games |&gt; \n  select(gamename,avg,month,year) |&gt;\n  top_n(15,year) |&gt;\n  arrange(desc(avg)) |&gt;\n  filter(gamename %in% c(\"Counter-Strike: Global Offensive\",\"Dota 2\",\"PLAYERUNKNOWN'S BATTLEGROUNDS\",\"Rust\",\"Apex Legends\",\"Grand Theft Auto V\",\"Team Fortress 2\",\"Cyberpunk 2077\",\"Tom Clancy's Rainbow Six Siege\",\"ARK: Survival Evolved\"))\n\n\ngames %&gt;% \n  filter(year == 2021) %&gt;%\n  select(gamename,avg,month,year) %&gt;%\n  top_n(15,avg) |&gt;\n  arrange(desc(avg)) %&gt;%\n  filter(gamename %in% c(\"Counter-Strike: Global Offensive\",\"Dota 2\",\"PLAYERUNKNOWN'S BATTLEGROUNDS\",\"Rust\",\"Apex Legends\",\"Grand Theft Auto V\",\"Team Fortress 2\",\"Cyberpunk 2077\",\"Tom Clancy's Rainbow Six Siege\",\"ARK: Survival Evolved\"))\n\n# A tibble: 15 × 4\n   gamename                             avg month     year\n   &lt;chr&gt;                              &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;\n 1 Counter-Strike: Global Offensive 743210. January   2021\n 2 Counter-Strike: Global Offensive 741013. February  2021\n 3 Dota 2                           432672. January   2021\n 4 Dota 2                           404832. February  2021\n 5 PLAYERUNKNOWN'S BATTLEGROUNDS    201247. January   2021\n 6 PLAYERUNKNOWN'S BATTLEGROUNDS    198958. February  2021\n 7 Rust                             142117. January   2021\n 8 Apex Legends                     120983. February  2021\n 9 Rust                             117742. February  2021\n10 Grand Theft Auto V               101251. January   2021\n11 Team Fortress 2                  101231. February  2021\n12 Grand Theft Auto V                90648. February  2021\n13 Team Fortress 2                   83148. January   2021\n14 Cyberpunk 2077                    82147. January   2021\n15 Tom Clancy's Rainbow Six Siege    77717. January   2021\n\n\n\n\n\n\n##avg means average people that still play that game\ngames_tidy_plot &lt;- ggplot(data = games_tidy) + \n  geom_point(aes(x = gamename,y = avg,color = gamename)) +  theme(axis.text.x = element_text(angle = 60, hjust = 1))\ngames_tidy_plot\n\n\n\nggsave(\"results.png\",plot = games_tidy_plot)\n\nSaving 7 x 5 in image\n\n\nfrom this plot i can see that counter strike is the top game being played\nhow long has counter strike been the leading game for?\n\ncsgo_data &lt;- games %&gt;% select(gamename,year,avg)\n\ncsgo_df &lt;- csgo_data %&gt;% group_by(year) %&gt;% summarise(mean_pop = mean(avg))\n\nggplot(data =csgo_data,aes(year,avg)) + geom_line()\n\n\n\n\ni want to compare counter strike from 2012 to 2021 to all games\n\ncomp_df &lt;- games %&gt;% group_by(year) %&gt;% filter(all(2012:2021)) %&gt;% summarise(mean_pop = mean(avg))\n\ncscom_plot &lt;- bind_rows(list(csgo = csgo_df,all_other_games = comp_df),.id = \"game\")\n\ncsgo_plot &lt;- ggplot(cscom_plot,aes(year,mean_pop,color = game)) + geom_point() + geom_smooth()\n\nggsave(\"csgo_plot.png\",plot = csgo_plot)\n\nSaving 7 x 5 in image\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\nggplot(cscom_plot,aes(year,mean_pop,color = game)) + geom_point() + geom_smooth()\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\nthis plot didn’t really tell me the impact so\nnow i want to compare csgo to games like grand theft auto and dota 2, which were very popular games over the years\n\ngame_comparison &lt;- games %&gt;% filter(gamename %in% c(\"Counter-Strike: Global Offensive\",\"Dota 2\",\"Grand Theft Auto V\")) %&gt;% select(gamename,year,avg)\n\ngames_plot &lt;- ggplot(game_comparison,aes(year,avg,color = gamename)) + geom_smooth()\n\nggplot(game_comparison,aes(year,avg,color = gamename)) + geom_smooth()\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\nggsave(\"games_plot.png\",plot = games_plot)\n\nSaving 7 x 5 in image\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\nWrite up your thoughts about this data science project here and answer the following questions:\ni can tell from this plot that games like apex legends,ark survival evolved,team fortress 2,cyberpunk 2077 are runners ups comparing them to the main companies like counter strike,grand theft auto,rainbow six siege and rust in the earlier part of 2021 from steams data.\nalso i found that counter strike averaged way more players over the years than other games\nthe company names of the big companies are\n-counter strike = Valve\n-dota 2 = also Valve\n-grand theft auto = Rockstar\n-rust = facepunch\n-rainbow six siege = ubisoft\nRunner up companies\n-apex legends = Respawn Entertainment\n-team forttress 2 = Valve\n-ark survival evolved = Studio Wildcard\n-cyberpunk 2077 = CD Projekt Red\n\nWhat did you find out in regards to your original question?\n\nthat the big companies could own alot more than i thought,the runner ups have been making waves in the gaming community\ncsgo has only been the leading game in players sense 2019\n\nWhat exceptions or caveats do you have in regards to your analysis you did?\n\nthat this data is only part of a small portion of 2021, and this is data only from a website called steam\nthat this data is not current data\n\nWhat follow up questions do you have?\n\ni wonder what games are peaking right now on the charts, i also wonder if some of these games are still pulling that many people\n\n\n\n\nSession info is a good thing to print out at the end of your notebooks so that you (and other folks) referencing your notebooks know what software versions and libraries you used to run the notebook.\n\nsessionInfo()\n\nR version 4.3.0 (2023-04-21)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/atlas/libblas.so.3.10.3 \nLAPACK: /usr/lib/x86_64-linux-gnu/atlas/liblapack.so.3.10.3;  LAPACK version 3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: UTC\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] usethis_2.1.6   lubridate_1.9.2 forcats_1.0.0   stringr_1.5.0  \n [5] dplyr_1.1.2     purrr_1.0.1     readr_2.1.4     tidyr_1.3.0    \n [9] tibble_3.2.1    ggplot2_3.4.2   tidyverse_2.0.0\n\nloaded via a namespace (and not attached):\n [1] utf8_1.2.3        generics_0.1.3    lattice_0.21-8    stringi_1.7.12   \n [5] hms_1.1.3         digest_0.6.31     magrittr_2.0.3    evaluate_0.20    \n [9] grid_4.3.0        timechange_0.2.0  fastmap_1.1.1     Matrix_1.5-4     \n[13] jsonlite_1.8.4    mgcv_1.8-42       fansi_1.0.4       scales_1.2.1     \n[17] textshaping_0.3.6 cli_3.6.1         rlang_1.1.1       crayon_1.5.2     \n[21] splines_4.3.0     bit64_4.0.5       munsell_0.5.0     withr_2.5.0      \n[25] yaml_2.3.7        tools_4.3.0       parallel_4.3.0    tzdb_0.3.0       \n[29] colorspace_2.1-0  curl_5.0.0        vctrs_0.6.2       R6_2.5.1         \n[33] lifecycle_1.0.3   fs_1.6.2          bit_4.0.5         vroom_1.6.3      \n[37] ragg_1.2.5        pkgconfig_2.0.3   pillar_1.9.0      gtable_0.3.3     \n[41] glue_1.6.2        systemfonts_1.0.4 xfun_0.39         tidyselect_1.2.0 \n[45] rstudioapi_0.14   knitr_1.42        farver_2.1.1      nlme_3.1-162     \n[49] htmltools_0.5.5   rmarkdown_2.21    labeling_0.4.2    compiler_4.3.0"
  },
  {
    "objectID": "posts/video-game-exploration/index.html#data",
    "href": "posts/video-game-exploration/index.html#data",
    "title": "Video Games",
    "section": "",
    "text": "For this project you will use whatever data you choose.\nOptions for places to find data are:\n\nhttps://www.kaggle.com/datasets\nhttps://shiny.rstudio.com/gallery/tidy-tuesday.html\nhttps://stat.ethz.ch/R-manual/R-devel/library/datasets/html/00Index.html (This is the data that comes with R - you can load them using datasets:: and pressing tab in RStudio to see the names of the datasets - for example datasets::ability.cov will load the ability dataset.) You are not limited to these options for finding your data.\n\n&lt;Write where you got your data and provide the link if applicable.&gt;\n&lt;Describe how the data was originally created. If this is data that is part of datasets you can use the ? like so: ?datasets::AirPassengers to see information about the datasets.Otherwise provide a summary based on the source of the data.&gt;"
  },
  {
    "objectID": "posts/video-game-exploration/index.html#the-goal-of-this-analysis",
    "href": "posts/video-game-exploration/index.html#the-goal-of-this-analysis",
    "title": "Video Games",
    "section": "",
    "text": "&lt;Write here what the goal of this analysis is. What question are we trying to answer?&gt; ## Set up\nwhat new gaming companies are competing against the big gaming companies?\nLoad packages you will need for this analysis.\n\n## you can add more, or change...these are suggestions\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(readr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(tidyr)\nlibrary(usethis)"
  },
  {
    "objectID": "posts/video-game-exploration/index.html#set-up-directories",
    "href": "posts/video-game-exploration/index.html#set-up-directories",
    "title": "Video Games",
    "section": "",
    "text": "Set up the directories you will need.\n\nif (!dir.exists(\"data\")) {\n  dir.create(\"data\")\n}\nif (!dir.exists(\"results\")) {\n  dir.create(\"results\")\n}"
  },
  {
    "objectID": "posts/video-game-exploration/index.html#get-the-data",
    "href": "posts/video-game-exploration/index.html#get-the-data",
    "title": "Video Games",
    "section": "",
    "text": "source of data :https://github.com/rfordatascience/tidytuesday/blob/master/data/2021/2021-03-16/readme.md#gamescsv\n\n# Read in your dataset(s)\n\n##source of data :https://github.com/rfordatascience/tidytuesday/blob/master/data/2021/2021-03-16/readme.md#gamescsv\n\ngames &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-03-16/games.csv')\n\nRows: 83631 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): gamename, month, avg_peak_perc\ndbl (4): year, avg, gain, peak\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nExplore your data here and describe what variables and samples you have.\n\nglimpse(games)\n\nRows: 83,631\nColumns: 7\n$ gamename      &lt;chr&gt; \"Counter-Strike: Global Offensive\", \"Dota 2\", \"PLAYERUNK…\n$ year          &lt;dbl&gt; 2021, 2021, 2021, 2021, 2021, 2021, 2021, 2021, 2021, 20…\n$ month         &lt;chr&gt; \"February\", \"February\", \"February\", \"February\", \"Februar…\n$ avg           &lt;dbl&gt; 741013.24, 404832.13, 198957.52, 120982.64, 117742.27, 1…\n$ gain          &lt;dbl&gt; -2196.42, -27839.52, -2289.67, 49215.90, -24374.98, 1808…\n$ peak          &lt;dbl&gt; 1123485, 651615, 447390, 196799, 224276, 133620, 146438,…\n$ avg_peak_perc &lt;chr&gt; \"65.9567%\", \"62.1275%\", \"44.4707%\", \"61.4752%\", \"52.4988…"
  },
  {
    "objectID": "posts/video-game-exploration/index.html#cleaning-the-data",
    "href": "posts/video-game-exploration/index.html#cleaning-the-data",
    "title": "Video Games",
    "section": "",
    "text": "games_tidy &lt;- games |&gt; \n  select(gamename,avg,month,year) |&gt;\n  top_n(15,year) |&gt;\n  arrange(desc(avg)) |&gt;\n  filter(gamename %in% c(\"Counter-Strike: Global Offensive\",\"Dota 2\",\"PLAYERUNKNOWN'S BATTLEGROUNDS\",\"Rust\",\"Apex Legends\",\"Grand Theft Auto V\",\"Team Fortress 2\",\"Cyberpunk 2077\",\"Tom Clancy's Rainbow Six Siege\",\"ARK: Survival Evolved\"))\n\n\ngames %&gt;% \n  filter(year == 2021) %&gt;%\n  select(gamename,avg,month,year) %&gt;%\n  top_n(15,avg) |&gt;\n  arrange(desc(avg)) %&gt;%\n  filter(gamename %in% c(\"Counter-Strike: Global Offensive\",\"Dota 2\",\"PLAYERUNKNOWN'S BATTLEGROUNDS\",\"Rust\",\"Apex Legends\",\"Grand Theft Auto V\",\"Team Fortress 2\",\"Cyberpunk 2077\",\"Tom Clancy's Rainbow Six Siege\",\"ARK: Survival Evolved\"))\n\n# A tibble: 15 × 4\n   gamename                             avg month     year\n   &lt;chr&gt;                              &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;\n 1 Counter-Strike: Global Offensive 743210. January   2021\n 2 Counter-Strike: Global Offensive 741013. February  2021\n 3 Dota 2                           432672. January   2021\n 4 Dota 2                           404832. February  2021\n 5 PLAYERUNKNOWN'S BATTLEGROUNDS    201247. January   2021\n 6 PLAYERUNKNOWN'S BATTLEGROUNDS    198958. February  2021\n 7 Rust                             142117. January   2021\n 8 Apex Legends                     120983. February  2021\n 9 Rust                             117742. February  2021\n10 Grand Theft Auto V               101251. January   2021\n11 Team Fortress 2                  101231. February  2021\n12 Grand Theft Auto V                90648. February  2021\n13 Team Fortress 2                   83148. January   2021\n14 Cyberpunk 2077                    82147. January   2021\n15 Tom Clancy's Rainbow Six Siege    77717. January   2021"
  },
  {
    "objectID": "posts/video-game-exploration/index.html#plot-the-data",
    "href": "posts/video-game-exploration/index.html#plot-the-data",
    "title": "Video Games",
    "section": "",
    "text": "##avg means average people that still play that game\ngames_tidy_plot &lt;- ggplot(data = games_tidy) + \n  geom_point(aes(x = gamename,y = avg,color = gamename)) +  theme(axis.text.x = element_text(angle = 60, hjust = 1))\ngames_tidy_plot\n\n\n\nggsave(\"results.png\",plot = games_tidy_plot)\n\nSaving 7 x 5 in image\n\n\nfrom this plot i can see that counter strike is the top game being played\nhow long has counter strike been the leading game for?\n\ncsgo_data &lt;- games %&gt;% select(gamename,year,avg)\n\ncsgo_df &lt;- csgo_data %&gt;% group_by(year) %&gt;% summarise(mean_pop = mean(avg))\n\nggplot(data =csgo_data,aes(year,avg)) + geom_line()\n\n\n\n\ni want to compare counter strike from 2012 to 2021 to all games\n\ncomp_df &lt;- games %&gt;% group_by(year) %&gt;% filter(all(2012:2021)) %&gt;% summarise(mean_pop = mean(avg))\n\ncscom_plot &lt;- bind_rows(list(csgo = csgo_df,all_other_games = comp_df),.id = \"game\")\n\ncsgo_plot &lt;- ggplot(cscom_plot,aes(year,mean_pop,color = game)) + geom_point() + geom_smooth()\n\nggsave(\"csgo_plot.png\",plot = csgo_plot)\n\nSaving 7 x 5 in image\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\nggplot(cscom_plot,aes(year,mean_pop,color = game)) + geom_point() + geom_smooth()\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\nthis plot didn’t really tell me the impact so\nnow i want to compare csgo to games like grand theft auto and dota 2, which were very popular games over the years\n\ngame_comparison &lt;- games %&gt;% filter(gamename %in% c(\"Counter-Strike: Global Offensive\",\"Dota 2\",\"Grand Theft Auto V\")) %&gt;% select(gamename,year,avg)\n\ngames_plot &lt;- ggplot(game_comparison,aes(year,avg,color = gamename)) + geom_smooth()\n\nggplot(game_comparison,aes(year,avg,color = gamename)) + geom_smooth()\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\nggsave(\"games_plot.png\",plot = games_plot)\n\nSaving 7 x 5 in image\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'"
  },
  {
    "objectID": "posts/video-game-exploration/index.html#get-the-stats",
    "href": "posts/video-game-exploration/index.html#get-the-stats",
    "title": "Video Games",
    "section": "",
    "text": "Write up your thoughts about this data science project here and answer the following questions:\ni can tell from this plot that games like apex legends,ark survival evolved,team fortress 2,cyberpunk 2077 are runners ups comparing them to the main companies like counter strike,grand theft auto,rainbow six siege and rust in the earlier part of 2021 from steams data.\nalso i found that counter strike averaged way more players over the years than other games\nthe company names of the big companies are\n-counter strike = Valve\n-dota 2 = also Valve\n-grand theft auto = Rockstar\n-rust = facepunch\n-rainbow six siege = ubisoft\nRunner up companies\n-apex legends = Respawn Entertainment\n-team forttress 2 = Valve\n-ark survival evolved = Studio Wildcard\n-cyberpunk 2077 = CD Projekt Red\n\nWhat did you find out in regards to your original question?\n\nthat the big companies could own alot more than i thought,the runner ups have been making waves in the gaming community\ncsgo has only been the leading game in players sense 2019\n\nWhat exceptions or caveats do you have in regards to your analysis you did?\n\nthat this data is only part of a small portion of 2021, and this is data only from a website called steam\nthat this data is not current data\n\nWhat follow up questions do you have?\n\ni wonder what games are peaking right now on the charts, i also wonder if some of these games are still pulling that many people"
  },
  {
    "objectID": "posts/video-game-exploration/index.html#print-out-session-info",
    "href": "posts/video-game-exploration/index.html#print-out-session-info",
    "title": "Video Games",
    "section": "",
    "text": "Session info is a good thing to print out at the end of your notebooks so that you (and other folks) referencing your notebooks know what software versions and libraries you used to run the notebook.\n\nsessionInfo()\n\nR version 4.3.0 (2023-04-21)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/atlas/libblas.so.3.10.3 \nLAPACK: /usr/lib/x86_64-linux-gnu/atlas/liblapack.so.3.10.3;  LAPACK version 3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: UTC\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] usethis_2.1.6   lubridate_1.9.2 forcats_1.0.0   stringr_1.5.0  \n [5] dplyr_1.1.2     purrr_1.0.1     readr_2.1.4     tidyr_1.3.0    \n [9] tibble_3.2.1    ggplot2_3.4.2   tidyverse_2.0.0\n\nloaded via a namespace (and not attached):\n [1] utf8_1.2.3        generics_0.1.3    lattice_0.21-8    stringi_1.7.12   \n [5] hms_1.1.3         digest_0.6.31     magrittr_2.0.3    evaluate_0.20    \n [9] grid_4.3.0        timechange_0.2.0  fastmap_1.1.1     Matrix_1.5-4     \n[13] jsonlite_1.8.4    mgcv_1.8-42       fansi_1.0.4       scales_1.2.1     \n[17] textshaping_0.3.6 cli_3.6.1         rlang_1.1.1       crayon_1.5.2     \n[21] splines_4.3.0     bit64_4.0.5       munsell_0.5.0     withr_2.5.0      \n[25] yaml_2.3.7        tools_4.3.0       parallel_4.3.0    tzdb_0.3.0       \n[29] colorspace_2.1-0  curl_5.0.0        vctrs_0.6.2       R6_2.5.1         \n[33] lifecycle_1.0.3   fs_1.6.2          bit_4.0.5         vroom_1.6.3      \n[37] ragg_1.2.5        pkgconfig_2.0.3   pillar_1.9.0      gtable_0.3.3     \n[41] glue_1.6.2        systemfonts_1.0.4 xfun_0.39         tidyselect_1.2.0 \n[45] rstudioapi_0.14   knitr_1.42        farver_2.1.1      nlme_3.1-162     \n[49] htmltools_0.5.5   rmarkdown_2.21    labeling_0.4.2    compiler_4.3.0"
  }
]